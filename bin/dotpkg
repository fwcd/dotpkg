#!/usr/bin/env python3

import argparse
import json
import os
import shutil
import socket
import sys
import platform

from dataclasses import dataclass
from pathlib import Path
from typing import Callable, Iterable

if sys.version_info < (3, 9):
    print('Python version >= 3.9 is required!')
    sys.exit(1)

DOTPKG_MANIFEST_NAME = 'dotpkg.json'
INSTALL_MANIFEST_DIR = Path('.').resolve()
INSTALL_MANIFEST_NAME = 'installs.json'
INSTALL_MANIFEST_PATH = INSTALL_MANIFEST_DIR / INSTALL_MANIFEST_NAME
INSTALL_MANIFEST_VERSION = 2
IGNORED_NAMES = {DOTPKG_MANIFEST_NAME, INSTALL_MANIFEST_NAME, '.git', '.gitignore', '.DS_Store'}

# Helpers

RED_COLOR = '\033[91m'
YELLOW_COLOR = '\033[93m'
BLUE_COLOR = '\033[36m'
GRAY_COLOR = '\033[90m'
GREEN_COLOR = '\033[92m'
PINK_COLOR = '\033[95m'
CLEAR_COLOR = '\033[0m'

@dataclass
class Options:
    dry_run: bool
    assume_yes: bool
    relative_target_path: bool
    update_install_manifest: bool

def message(msg: str, color: str):
    print(f'{color}==> {msg}{CLEAR_COLOR}')

def error(msg: str):
    message(msg, RED_COLOR)
    sys.exit(1)

def warn(msg: str):
    message(msg, YELLOW_COLOR)

def info(msg: str):
    message(msg, BLUE_COLOR)

def success(msg: str):
    message(msg, GREEN_COLOR)

def note(msg: str):
    print(f'{GRAY_COLOR}{msg}{CLEAR_COLOR}')

def prompt(msg: str, choices: list[str], default: str, opts: Options):
    if opts.assume_yes:
        return default

    aliases = {}
    option_strs = []

    if choices:
        for choice in choices:
            i = 1
            while choice[:i] in aliases.keys():
                i += 1
            aliases[choice[:i]] = choice
            option_strs.append(f'[{choice[:i]}]{choice[i:]}')

    choices_str = f" - {', '.join(option_strs)}"
    response = input(f"{PINK_COLOR}==> {msg}{choices_str} {CLEAR_COLOR}")

    return aliases.get(response, response)

def confirm(msg: str, opts: Options):
    response = prompt(msg, ['yes', 'no'], 'yes', opts)
    return response == 'yes'

def relativize(path: Path, base_path: Path) -> Path:
    # We use os.path.relpath instead of Path.relative_to since
    # it works too if the base_path is not an ancestor of path
    # (by inserting '..' as needed).
    return Path(os.path.relpath(str(path), str(base_path)))

# Manifest resolution

MANIFEST_VARS = {
    '${home}': str(Path.home().resolve()),
    '${hostname}': socket.gethostname()
}

def resolve_manifest_str(s: str) -> str:
    resolved = s
    for key, value in MANIFEST_VARS.items():
        resolved = resolved.replace(key, value)
    return resolved

def resolve_ignores(src_dir: Path, manifest: dict) -> set[Path]:
    host_specific_patterns = manifest.get('hostSpecificFiles', [])
    host_specific_includes = {
        src_dir / resolve_manifest_str(p)
        for p in host_specific_patterns
    }
    host_specific_ignores = {
        i
        for p in host_specific_patterns
        for i in src_dir.glob(p.replace('${hostname}', '*'))
        if i not in host_specific_includes and not i.name.endswith('.private')
    }
    custom_ignores = {
        i
        for p in manifest.get('ignoredFiles', [])
        for i in src_dir.glob(p)
    }
    ignores = host_specific_ignores.union(custom_ignores)
    return ignores

def find_target_dir(manifest: dict) -> Path:
    raw_dirs = manifest.get('targetDir', ['${home}'])

    for raw_dir in raw_dirs:
        path = Path(resolve_manifest_str(raw_dir))
        if path.is_dir() and path.exists():
            return path

    if manifest.get('createTargetDirIfNeeded', False) and raw_dirs:
        path = Path(resolve_manifest_str(raw_dirs[0]))
        path.mkdir(parents=True)
        return path

    error(f'No suitable targetDir found in {raw_dirs}!')

def unsatisfied_path_requirements(manifest: dict) -> Iterable[str]:
    for requirement in manifest.get('requiresOnPath', []):
        if not shutil.which(requirement):
            yield requirement

def manifest_name(path: Path, manifest: dict) -> str:
    return manifest.get('name', path.name)

# Installation/uninstallation

def find_link_candidates(src_dir: Path, target_dir: Path, renamer: Callable[[str], str] = lambda name: name) -> Iterable[tuple[Path, Path]]:
    for src_path in src_dir.iterdir():
        name = renamer(src_path.name)
        target_path = target_dir / name

        if name not in IGNORED_NAMES:
            # We only descend into existing directories that are not Git repos
            if target_path.exists() and not target_path.is_symlink() and target_path.is_dir() and not (target_path / '.git').exists():
                yield from find_link_candidates(src_path, target_path)
            else:
                yield src_path, target_path

def copy(src_path: Path, target_path: Path, opts: Options):
    print(f'Copying {src_path} to {target_path}')
    if not opts.dry_run:
        shutil.copy(src_path, target_path)

def move(src_path: Path, target_path: Path, opts: Options):
    print(f'Moving {src_path} to {target_path}')
    if not opts.dry_run:
        shutil.move(src_path, target_path)

def add_link(src_path: Path, target_path: Path, opts: Options):
    print(f'Linking {target_path} -> {src_path}')
    if not opts.dry_run:
        target_path.symlink_to(src_path)

def remove(target_path: Path, opts: Options):
    print(f'Removing {target_path}')
    if not opts.dry_run:
        target_path.unlink()

def read_install_manifest(opts: Options) -> dict:
    try:
        with open(INSTALL_MANIFEST_PATH, 'r') as f:
            manifest = json.load(f)
            version = manifest.get('version', 0)
            if version < INSTALL_MANIFEST_VERSION:
                if not confirm(f'An older install manifest with version {version} (current is {INSTALL_MANIFEST_VERSION}) exists at {INSTALL_MANIFEST_PATH}, which may be incompatible with the current version. Should this be used anyway? If no, the old one will be ignored/overwritten.', opts):
                    manifest['version'] = INSTALL_MANIFEST_VERSION
                else:
                    manifest = None
    except FileNotFoundError:
        manifest = None
    return manifest or {
        '$schema': 'https://raw.githubusercontent.com/fwcd/dotpkg/main/schemas/installs.schema.json',
        'version': INSTALL_MANIFEST_VERSION,
    }

def write_install_manifest(manifest: dict, opts: Options):
    if INSTALL_MANIFEST_PATH.exists():
        note(f'Updating {INSTALL_MANIFEST_PATH}')
    else:
        print(f'Creating {INSTALL_MANIFEST_PATH}')
    if not opts.dry_run:
        with open(INSTALL_MANIFEST_PATH, 'w') as f:
            json.dump(manifest, f, indent=2)

def install(src_dir: Path, manifest: dict, opts: Options):
    target_dir = find_target_dir(manifest)

    install_manifest = read_install_manifest(opts)
    installs = install_manifest.get('installs', {})
    install_key = str(relativize(src_dir, INSTALL_MANIFEST_DIR))

    if install_key in installs:
        existing_install = installs[install_key]
        existing_target_dir = Path(existing_install.get('targetDir', str(target_dir)))
        if target_dir.resolve() != existing_target_dir.resolve():
            if confirm(f'The dotpkg {install_key} is already installed to {existing_target_dir}, but currently targets {target_dir}. Should it be uninstalled from the old target dir first?', opts):
                uninstall(src_dir, manifest, opts)
            else:
                warn(f'This will leave the installed files at {existing_target_dir} orphaned, since the install for {install_key} in {INSTALL_MANIFEST_PATH} will be repointed to {target_dir}')

    ignores = resolve_ignores(src_dir, manifest)
    renames = manifest.get('renames', {})

    def renamer(name: str) -> str:
        for pat, s in renames.items():
            name = name.replace(resolve_manifest_str(pat), resolve_manifest_str(s))
        return name

    installed_paths: list[Path] = []
    
    for src_path, target_path in find_link_candidates(src_dir, target_dir, renamer):
        if src_path in ignores:
            note(f'Ignoring {src_path}')
        else:
            skipped = False

            if target_path.exists():
                if not target_path.is_symlink() or target_path.resolve() != src_path.resolve():
                    def backup():
                        move(target_path, target_path.with_name(f'{target_path.name}.backup'), opts)
                        add_link(src_path, target_path, opts)

                    def overwrite():
                        remove(target_path, opts)
                        add_link(src_path, target_path, opts)

                    def skip():
                        note(f'Skipping {target_path}')
                        nonlocal skipped
                        skipped = True

                    choices = {
                        'backup': backup,
                        'overwrite': overwrite,
                        'skip': skip
                    }

                    response = prompt(f'{target_path} exists and is not a link into the dotpkg.', sorted(choices.keys()), 'skip', opts)
                    choices.get(response, skip)()
                else:
                    note(f'Skipping {target_path} (already linked)')
            else:
                add_link(src_path, target_path, opts)

            if not skipped:
                installed_paths.append(target_path)
    
    if opts.update_install_manifest:
        installs[install_key] = {
            'targetDir': str(relativize(target_dir, INSTALL_MANIFEST_DIR) if opts.relative_target_path else target_dir),
            'paths': [str(path) for path in installed_paths],
        }
        install_manifest['installs'] = installs
        write_install_manifest(install_manifest, opts)

def uninstall(src_dir: Path, manifest: dict, opts: Options):
    install_manifest = read_install_manifest(opts)
    installs = install_manifest.get('installs', {})
    install_key = str(relativize(src_dir, INSTALL_MANIFEST_DIR))
    install = installs.get(install_key, {})

    target_dir = Path(install['targetDir']) if 'targetDir' in install else find_target_dir(manifest)
    paths = [(None, Path(path)) for path in install['paths']] if 'paths' in install else find_link_candidates(src_dir, target_dir)

    for src_path, target_path in paths:
        if target_path.is_symlink() and (not src_path or target_path.resolve() == src_path.resolve()):
            remove(target_path, opts)
        else:
            print(f'Skipping {target_path} (not a link into the dotpkg)')
    
    if opts.update_install_manifest:
        del installs[install_key]
        install_manifest['installs'] = installs
        write_install_manifest(install_manifest, opts)

# Dotpkg resolution

def cwd_dotpkgs() -> list[str]:
    return [
        p.name
        for p in Path.cwd().iterdir()
        if not p.name in IGNORED_NAMES and (p / DOTPKG_MANIFEST_NAME).exists()
    ]

def resolve_dotpkgs(dotpkgs: list[str]) -> Iterable[tuple[Path, dict]]:
    for dotpkg in dotpkgs:
        path = Path.cwd() / dotpkg
        manifest_path = path / DOTPKG_MANIFEST_NAME

        if not path.exists() or not path.is_dir():
            error(f"Dotpkg '{dotpkg}' does not exist in cwd!")
        if not manifest_path.exists():
            error(f"Missing dotpkg.json for '{dotpkg}'!")

        with open(str(manifest_path), 'r') as f:
            manifest = json.loads(f.read())

        yield path, manifest

# CLI

def install_cmd(dotpkgs: list[str], opts: Options):
    check_path = False
    check_platforms = False

    if not dotpkgs:
        dotpkgs = cwd_dotpkgs()
        check_path = True
        check_platforms = True
        if not confirm(f"Install dotpkgs {', '.join(dotpkgs)}?", opts):
            print('Cancelling')
            sys.exit(0)

    for path, manifest in resolve_dotpkgs(dotpkgs):
        name = manifest_name(path, manifest)
        description = manifest.get('description', '')
        unsatisfied_reqs = list(unsatisfied_path_requirements(manifest))
        supported_platforms = set(manifest.get('platforms', []))
        our_platform = platform.system().lower()

        if not check_platforms or not supported_platforms or (our_platform in supported_platforms):
            if not check_path or not unsatisfied_reqs:
                info(f'Installing {name} ({description})...')
                install(path, manifest, opts)
            else:
                warn(f"Skipping {name} (could not find {', '.join(unsatisfied_reqs)} on PATH)")
        else:
            warn(f"Skipping {name} (platform {our_platform} is not supported, supported are {', '.join(sorted(supported_platforms))})")

def uninstall_cmd(dotpkgs: list[str], opts: Options):
    if not dotpkgs:
        dotpkgs = cwd_dotpkgs()
        if not confirm(f"Uninstall dotpkgs {', '.join(dotpkgs)}?", opts):
            print('Cancelling')
            sys.exit(0)

    for path, manifest in resolve_dotpkgs(dotpkgs):
        info(f"Uninstalling {manifest_name(path, manifest)} ({manifest.get('description', '')})...")
        uninstall(path, manifest, opts)

COMMANDS = {
    'install': install_cmd,
    'uninstall': uninstall_cmd
}

def main():
    parser = argparse.ArgumentParser(description='Dotfile package manager')
    parser.add_argument('-d', '--dry-run', action='store_true', help='Simulate a run without any modifications to the file system.')
    parser.add_argument('-y', '--assume-yes', action='store_true', help='Accept prompts with yes and run non-interactively (great for scripts)')
    parser.add_argument('--no-install-manifest', action='store_false', dest='update_install_manifest', help=f'Skips creating an install manifest ({INSTALL_MANIFEST_NAME}).')
    parser.add_argument('--relative-target-path', action='store_true', help='Install a relative path to the target dir into the install manifest.')
    parser.add_argument('command', choices=sorted(COMMANDS.keys()), help='The command to invoke')
    parser.add_argument('dotpkgs', nargs=argparse.ZERO_OR_MORE, help='The dotpkgs to install (all by default)')

    args = parser.parse_args()
    opts = Options(
        dry_run=args.dry_run,
        assume_yes=args.assume_yes,
        relative_target_path=args.relative_target_path,
        update_install_manifest=args.update_install_manifest,
    )

    if opts.dry_run:
        warn("Performing dry run (i.e. not actually changing any files)")

    COMMANDS[args.command](args.dotpkgs, opts)

if __name__ == '__main__':
    main()
