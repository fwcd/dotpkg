#!/usr/bin/env python3

from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Optional

import re
import json

ROOT = Path(__file__).resolve().parent.parent

@dataclass
class Field:
    name: str
    type: str
    description: Optional[str] = None

@dataclass
class Dataclass:
    name: str
    description: Optional[str] = None
    fields: list[Field] = field(default_factory=lambda: [])

@dataclass
class Output:
    imports: set[str] = field(default_factory=set)
    dataclasses: list[Dataclass] = field(default_factory=lambda: [])

def from_camel_case(raw: str) -> list[str]:
    return [c.lower() for c in re.split(r'(?<=[a-z])(?=[A-Z])', raw)]

def to_snake_case(components: list[str]) -> str:
    return '_'.join(components)

def indent(lines: list[str]) -> list[str]:
    return [f'    {l}' for l in lines]

def format_field(field: Field) -> list[str]:
    return [
        f'{field.name}: {field.type}',
        *([f"'''{field.description}'''"] if field.description else []),
    ]

def format_dataclass(dataclass: Dataclass) -> list[str]:
    return [
        '@dataclass',
        f'class {dataclass.name}:',
        *indent([
            *([f"'''{dataclass.description}'''", ''] if dataclass.description else []),
            *[l for f in dataclass.fields for l in format_field(f)],
        ]),
    ]

def translate_schema(name: str, value: dict[str, Any], output: Output) -> str:
    match value['type']:
        case 'string':
            return 'str'
        case 'boolean':
            return 'bool'
        case 'integer':
            return 'int'
        case 'number':
            return 'float'
        case 'array':
            return translate_schema(
                name=name,
                value=value['items'],
                output=output,
            )
        case 'object':
            if 'properties' in value:
                fields = [
                    Field(
                        name=to_snake_case(from_camel_case(key)),
                        type=translate_schema(
                            name=key.capitalize(),
                            value=prop,
                            output=output,
                        ),
                        description=prop.get('description'),
                    )
                    for key, prop in value['properties'].items()
                ]
                output.dataclasses.append(Dataclass(
                    name=name,
                    description=value.get('description'),
                    fields=fields,
                ))
                return name
            elif 'additionalProperties' in value:
                t = translate_schema(
                    name=name,
                    value=value['additionalProperties'],
                    output=output
                )
                return f'dict[str, {t}]'
            else:
                output.imports.add('from typing import Any')
                return 'dict[str, Any]'
        case t:
            raise ValueError(f'Unknown type {t}')

def main():
    for name in ['dotpkg', 'installs']:
        output = Output()

        with open(ROOT / 'schemas' / f'{name}.schema.json', 'r') as f:
            raw = json.load(f)
            translate_schema(
                name=name.capitalize(),
                value=raw,
                output=output
            )
        
        if output.dataclasses:
            output.imports.add('from dataclasses import dataclass')
        
        with open(ROOT / 'dotpkg' / 'model' / f'{name}.py', 'w') as f:
            raw = '\n\n'.join([
                '\n'.join(output.imports),
                *('\n'.join(format_dataclass(d)) for d in output.dataclasses),
                '',
            ])
            f.write(raw)
            

if __name__ == '__main__':
    main()
